//Target sum


class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        
        int sum=0;
        for(int i=0;i<nums.length;i++)
            sum+=nums[i];
        
        int target=(sum+S)/2;
        
        //s1-s2=S
        //s1+s2=sum[arr[i]]
        //2s1=(sum+diff)/2;
        //then count the subset of given sum
      if( S > sum || (sum + S) % 2 != 0 )
        return 0;
        
        
        
        return countsubset(nums,target);
    
    }
    static int countsubset(int nums[],int target)
    {
        int n=nums.length;
        int dp[][]=new int[n+1][target+1];
        
        for(int i=0;i<=n;i++)
            dp[i][0]=1;
        for(int i=1;i<=target;i++)
            dp[0][i]=0;
        
         
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<=target;j++)
            {
                if(nums[i-1]<=j)
                    dp[i][j]=dp[i-1][j]+dp[i-1][j-nums[i-1]];
                else
                    dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][target];
    }
}
